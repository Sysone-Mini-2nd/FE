function RecentNotifications() {

    //ÏòàÏãú Îç∞Ïù¥ÌÑ∞
  const notifications = [
    {
      id: 1,
      type: 'mention',
      title: 'ÍπÄÌåÄÏû•ÎãòÏù¥ ÌöåÏùòÎ°ùÏóêÏÑú Ïñ∏Í∏âÌñàÏäµÎãàÎã§',
      message: '"UI Í∞úÏÑ† Í±¥ÏùÄ Ïù¥Î≤à Ï£ºÍπåÏßÄ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî"',
      time: '5Î∂Ñ Ï†Ñ',
      isRead: false
    },
    {
      id: 2,
      type: 'approval',
      title: 'ÌîÑÎ°úÏ†ùÌä∏ ÏòàÏÇ∞ ÏäπÏù∏ ÏöîÏ≤≠',
      message: 'Í∞úÎ∞úÌåÄ Ï∂îÍ∞Ä Ïû•ÎπÑ Íµ¨Îß§ Í±¥Ïù¥ ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏûÖÎãàÎã§',
      time: '1ÏãúÍ∞Ñ Ï†Ñ',
      isRead: false
    },
    {
      id: 3,
      type: 'update',
      title: 'ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏',
      message: 'Î™®Î∞îÏùº Ïï± Í∞úÎ∞úÏù¥ 80% ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§',
      time: '3ÏãúÍ∞Ñ Ï†Ñ',
      isRead: true
    },
    {
      id: 4,
      type: 'system',
      title: 'ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏïàÎÇ¥',
      message: 'Ïò§Îäò Î∞§ 12Ïãú-2Ïãú ÏÑúÎ≤Ñ Ï†êÍ≤ÄÏù¥ ÏòàÏ†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§',
      time: '5ÏãúÍ∞Ñ Ï†Ñ',
      isRead: true
    }
  ];

  const getNotificationIcon = (type) => {
    switch(type) {
      case 'mention': return 'üí¨';
      case 'approval': return '‚úÖ';
      case 'update': return 'üìà';
      case 'system': return '‚öôÔ∏è';
      default: return 'üì¢';
    }
  };

  const getNotificationColor = (type) => {
    switch(type) {
      case 'mention': return 'bg-blue-100 text-blue-800';
      case 'approval': return 'bg-yellow-100 text-yellow-800';
      case 'update': return 'bg-green-100 text-green-800';
      case 'system': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-sm">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">ÏµúÍ∑º ÏïåÎ¶º & ÌôúÎèô</h3>
        <div className="flex items-center space-x-2">
          <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
            {notifications.filter(n => !n.isRead).length}
          </span>
          <button className="text-sm text-blue-600 hover:text-blue-800">
            Î™®Îëê ÏùΩÏùå
          </button>
        </div>
      </div>
      
      <div className="space-y-3 max-h-64 overflow-y-auto">
        {notifications.map((notification) => (
          <div 
            key={notification.id} 
            className={`p-3 rounded-lg border transition-colors cursor-pointer ${
              notification.isRead 
                ? 'bg-gray-50 border-gray-200' 
                : 'bg-blue-50 border-blue-200'
            }`}
          >
            <div className="flex items-start space-x-3">
              <div className="flex-shrink-0">
                <span className="text-lg">{getNotificationIcon(notification.type)}</span>
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center justify-between mb-1">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getNotificationColor(notification.type)}`}>
                    {notification.type.toUpperCase()}
                  </span>
                  {!notification.isRead && (
                    <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  )}
                </div>
                <h4 className="text-sm font-medium text-gray-900 mb-1">
                  {notification.title}
                </h4>
                <p className="text-sm text-gray-600 mb-2">
                  {notification.message}
                </p>
                <span className="text-xs text-gray-500">
                  {notification.time}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="mt-4 pt-3 border-t border-gray-200">
        <button className="w-full text-sm text-center text-blue-600 hover:text-blue-800">
          Î™®Îì† ÏïåÎ¶º Î≥¥Í∏∞
        </button>
      </div>
    </div>
  )
}

export default RecentNotifications
